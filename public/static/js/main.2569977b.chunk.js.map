{"version":3,"sources":["images/bg.jpg","images/logo-black.png","components/StyledComponents.js","components/MissionKey.js","components/LaunchItem.js","components/Launches.js","components/Header.js","components/LaunchDetailsPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","styled","img","Background","div","bg","Row","Navbar","LaunchInfo","Button","NavLink","Divider","MissionKey","className","titleStyle","margin","lineHeight","verticalAlign","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","status","color","success","msg","style","to","backgroundColor","format","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","key","Component","Header","src","logo","position","top","LAUNCHQUERY","LaunchDetail","id","parseInt","this","props","match","params","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","opacity","String","client","ApolloClient","uri","App","exact","path","component","LaunchDetails","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2569977b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.e4f6f1eb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo-black.dc45d3df.png\";","import styled from 'styled-components'\r\nimport { NavLink } from 'react-router-dom'\r\nimport bg from '../images/bg.jpg';\r\n\r\nexport const Logo = styled.img`\r\n  display: inline-block;\r\n  max-width: 200px;\r\n`;\r\n\r\nexport const Background = styled.div`\r\nheight: 100vh;\r\nposition: relative;\r\nz-index: 1;\r\n\r\n&:before,\r\n&:after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;    \r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n&:before {\r\n  z-index: -2;\r\n  background: url(${bg}) no-repeat center;\r\n  background-size: cover;\r\n  filter: grayscale(100%);\r\n}\r\n&:after {\r\n  // background-color: rgba(0, 0, 0, 0.7);\r\n  z-index: -1;\r\n}\r\n\r\n`;\r\n\r\nexport const Row = styled.div`\r\n  @media(min-width: 768px) {\r\n    height: 100%;\r\n    padding-top: 4rem;\r\n    padding-bottom: 4rem;\r\n}\r\n`;\r\n\r\nexport const Navbar = styled.div`\r\nbackground-color: rgba(255, 255, 255, 0.8);\r\ncolor: #333;\r\nright: -6rem;\r\nposition: relative;\r\nz-index: 3;\r\nheight: 88vh;\r\n\r\n& .nav-wrapper {\r\n  overflow-y: auto;\r\n  height: 80%;\r\n}\r\n`;\r\n\r\nexport const LaunchInfo = styled.div `\r\nbackground-color: rgba(1, 10, 19, 0.6);\r\nheight: 94vh;\r\noverflow-y: auto;\r\npadding-left: 130px;\r\n`;\r\n\r\n\r\n// LAUNCH ITEM\r\nexport const Button = styled(NavLink)`\r\n    color: #fff !important;\r\n    background-color: #222;\r\n    border: 1px solid #222;\r\n    display: inline-block;\r\n    line-height: 1;\r\n    vertical-align: middle;\r\n    padding: 7px 12px 8px;\r\n    border-radius: 50px;\r\n    transform: translateX(0);\r\n    transition: all 0.3s ease-in-out;\r\n    text-align: center;\r\n\r\n    &:hover {\r\n        background-color: #444;\r\n        // color: #222 !important; background-color: transparent;\r\n        text-decoration: none !important;\r\n        transform: translateX(4px);\r\n    }\r\n`;\r\n\r\nexport const Divider = styled.div`\r\n    width: 100%;\r\n    display: inline-block;\r\n    line-height: 10px;\r\n    font-size: 8px;\r\n    margin-top: 8px;\r\n    margin-bottom: 8px;\r\n    color: #fff;\r\n    font-weight: bold;\r\n`;","import React from 'react'\r\n\r\nconst MissionKey = () => {\r\n    return (\r\n        <div className=\"mt-3 mb-4 d-flex flex-wrap\">\r\n            <p className=\"mr-3 mb-0\">\r\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n            </p>\r\n            <p className=\"mr-3 mb-0\">\r\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n            </p>\r\n            <p className=\"mr-3 mb-0\">            \r\n                <span className=\"px-3 mr-2 bg-warning\" /> = Pending\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MissionKey\r\n","import React from 'react'\r\nimport className from 'classnames'\r\nimport Moment from 'react-moment'\r\nimport { Button, Divider } from './StyledComponents'\r\n\r\n\r\nconst titleStyle = {\r\n    margin: 0,\r\n    lineHeight: '30px',\r\n    verticalAlign: 'middle'\r\n}\r\n\r\nconst LaunchItem = ({launch:{flight_number, mission_name, launch_date_local, launch_success}}) => {\r\n    // console.log(flight_number, mission_name, launch_date_local, launch_success)\r\n\r\n    let status = {\r\n        color: 'green',\r\n        success: true,\r\n        msg: 'SUCCESS'\r\n    }\r\n\r\n    if (launch_success === false) {\r\n        status = {\r\n            color: 'red',\r\n            success: false,\r\n            msg: 'FAILED'\r\n        }\r\n    } else if (launch_success === null) {\r\n        status = {\r\n            color: 'orange',\r\n            success: null,\r\n            msg: 'PENDING'\r\n        }\r\n    } \r\n\r\n    return (\r\n        <div className=\"card card-body mb-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-8\">\r\n                    <h4 style={titleStyle}>Mission: \r\n                    <span className={className({\r\n                        'text-success' : launch_success === true,\r\n                        'text-danger' : launch_success === false,\r\n                        'text-warning' : launch_success === null\r\n                    })}>{ mission_name }</span></h4>\r\n                </div>\r\n                <div className=\"col-md-4 text-right\">\r\n                    <Button to={`/launches/${flight_number}`}>Launch Details</Button>\r\n                </div>\r\n            </div>\r\n            <Divider style={{backgroundColor: status.color}}>\r\n                {status.msg}                \r\n            </Divider>\r\n            <p className=\"mb-0\">Date: <Moment format=\"DD-MM-YYYY HH:mm\">{ launch_date_local }</Moment><br />\r\n            Time: <Moment format=\"HH:mm\">{ launch_date_local }</Moment></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LaunchItem\r\n","import React, { Component } from 'react';\r\nimport gql from 'graphql-tag'; // following tutorial\r\nimport { Query } from 'react-apollo';\r\nimport LaunchItem from './LaunchItem';\r\n \r\n// this is recommended on apollo site\r\n// import { gql } from 'apollo-boost';\r\n// import { useQuery } from '@apollo/react-hooks';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n    query LaunchesQuery {\r\n        launches {\r\n            flight_number\r\n            mission_name\r\n            launch_date_local\r\n            launch_success\r\n        }\r\n    }\r\n`;\r\n\r\nclass Launches extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Query query={LAUNCHES_QUERY}>\r\n                    {\r\n                        ({ loading, error, data }) => {\r\n                            if (loading) { \r\n                                return <h4>Loading...</h4>\r\n                            } else if (error) {\r\n                                 console.log(error)\r\n                                 return <h4>Error</h4>\r\n                            } else {\r\n                                return ( \r\n                                    <>\r\n                                        {\r\n                                            data.launches.map((launch) => (\r\n                                                <LaunchItem key={launch.flight_number} launch={launch} />\r\n                                            ))\r\n                                        }\r\n                                    </>\r\n                                )\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                </Query>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Launches\r\n","import React from 'react'\r\nimport {Logo, Navbar } from './StyledComponents'\r\nimport MissionKey from './MissionKey'\r\nimport Launches from './Launches';\r\nimport logo from '../images/logo-black.png'; \r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar className=\"col col-12 col-md-5 r-md-n5 h-md-100 p-5\">\r\n      <h1 className=\"mb-4\">\r\n        <Logo src={logo} className='logo' />\r\n        <span style={{position: 'relative', top: '8px'}}>Launches</span>\r\n        </h1>\r\n        <MissionKey />\r\n      <div className=\"nav-wrapper\">\r\n      <Launches />\r\n      </div>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, {Component} from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { Query } from 'react-apollo'\r\nimport Header from './Header'\r\nimport { Row, LaunchInfo } from './StyledComponents'\r\nimport Moment from 'react-moment'\r\n\r\nconst LAUNCHQUERY = gql`\r\n    query LaunchQuery($flight_number:Int!) {\r\n        launch(flight_number: $flight_number) {\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_success\r\n            launch_date_local\r\n            rocket {\r\n                rocket_id\r\n                rocket_name\r\n                rocket_type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nclass LaunchDetail extends Component {\r\n    render() {\r\n        const id = parseInt(this.props.match.params.id || 1)\r\n        \r\n        return (\r\n            <Row className=\"row py-md-5 pl-md-5 pr-md-4 mx-0\">\r\n                <Header />\r\n                <LaunchInfo className=\"LaunchInfo col col-12 col-md-7 py-5 pr-5 my-md-n4\">\r\n                    <Query query={LAUNCHQUERY} variables={{flight_number: id}}>\r\n                        { \r\n                            ({ loading, error, data }) => {\r\n                                if(loading) {\r\n                                    return (<h4>Loading</h4>)\r\n                                } else if(error) {\r\n                                    console.log(error)\r\n                                    return (<h4>Error</h4>)\r\n                                } else {\r\n                                    const {mission_name, flight_number, launch_year, launch_success, launch_date_local, rocket: {rocket_id, rocket_name, rocket_type}} = data.launch\r\n                                    return (\r\n                                        <>\r\n                                        <h1 className=\"display-4 my-3\"><span style={{opacity: 0.7}}>Mission:</span> {mission_name}</h1>\r\n                                        <h4 className=\"mb-3\">Launch Details</h4>\r\n                                        <ul className=\"list-group mb-5\">\r\n                                            <li className=\"list-group-item\">Flight Number: {flight_number}</li>\r\n                                            <li className=\"list-group-item\">Launch Year: {launch_year}</li>\r\n                                            <li className=\"list-group-item\">Launch Successful: {String(launch_success)}</li>\r\n                                            <li className=\"list-group-item\">Launch Date: <Moment format=\"DD-MM-YYYY - HH:mm\">{launch_date_local}</Moment></li>\r\n                                            <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n                                        </ul>\r\n                                        <h4 className=\"mb-3\">Rocket Details</h4>\r\n                                        <ul className=\"list-group\">\r\n                                            <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n                                            <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n                                            <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n                                        </ul>\r\n                                        </>\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                    </Query>\r\n                </LaunchInfo>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default LaunchDetail  ","import React from 'react';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport LaunchDetails from './components/LaunchDetailsPage'\r\n\r\nimport { Background } from './components/StyledComponents'\r\nimport './App.scss';\r\n \r\n\r\nconst uri = {uri: '/graphql'}; \r\nconst client = new ApolloClient(uri);\r\n\r\nconst App = () => {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <Background>\r\n          <Route exact path=\"/\" component={LaunchDetails} />\r\n          <Route exact path=\"/launches/:id\" component={LaunchDetails} />\r\n        </Background>\r\n      </Router>\r\n    </ApolloProvider> \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}